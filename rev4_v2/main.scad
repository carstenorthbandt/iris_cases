/*

    This file generates the 3d-printable parts for an Iris Rev 4 case.

    The full case includes:

    - Bottom lid with insets to glue in magnets (10mm diameter, 3mm height) and alignment pods for the lighting layer
    - Lighting layer
    - Upper case
    - Template for cutting foam
    - Tenting feet

    What you need:
    - 10 Screws (M2x16 self-tapping)
    - White foam layer to go on either side of the lighting layer, 1.7-2mm thick
    - Rubber or some other anti-slip pads
    
    Construction:
    - Print all parts, start with the cutting template
        - The top is meant to be printed upside down, supports are included and should not be generated by your slicer
        - The lighting layer needs transparent filament
        - Infill is not critical
        - Layer height is not critical
    - Glue magnets into bottom lid
    - Cut foam pads using template
    - Stamp holes into foam pads using the template
        - There are two kinds of foam pads, upper and lower
        - The upper ones needs the holes for LEDs and screws only
        - The lower pads need the holes for screws, alignment pods, and magnets
    - Cut and glue spacers/dampeners to go on the switch side of the PCB, between the PCB and the top case; off-cuts from the white foam work great
    - Assemble the sandwich, screw hand-tight


    IMPORTANT: Unless you modify the case, the reset switch is not accessible once assembled. My keyboards all run firmware that allows me to go into 
    flash mode from pressing the four innermost thumb keys simultaneously regardless of layer or keymap.

*/

gen_left=true;
gen_right=false;

gen_bottom=true;
gen_lightdistributor=true;
gen_top=true;
gen_top_3dprint_supports=false;

gen_pcb=false;
gen_magnets=false;

gen_foamtemplate=false;

gen_feet=true;

tenting_angle=20;

explode_factor=0.0;


// -----------------------------------------------------


_3_32nds = 3/32 * 25.4;

key_grid=19.05;
key_grid_yofs_1=0*_3_32nds;
key_grid_yofs_2=0*_3_32nds;
key_grid_yofs_3=2*_3_32nds;
key_grid_yofs_4=3*_3_32nds;
key_grid_yofs_5=2*_3_32nds;
key_grid_yofs_6=1*_3_32nds;

sw_w=16;
sw_l=16;

sw_mpin_d=4-0.4;
sw_spin_d=1.5-0.5;
sw_spin_x=5;

sw_upper_baseh=6.0;
sw_stem_r=2.0;
sw_stem_h=4.0;
sw_lower_baseh=4.5;
sw_lower_stemh=2.5;
sw_lower_stemr=3.7/2;
sw_pin1_x=2.6;
sw_pin1_y=5.2;
sw_pin2_x=-3.8;
sw_pin2_y=2.5;
sw_pin_r=0.5;
sw_pin_h=3.3;
sw_notchw=4.0;
sw_notchl=1.0;
sw_notchh=1.3;

screw_d=2.9;
screw_l=14;
screw_f=1.9;

//$fn=25;
$fn=45;

key_pos_list=[
    [0*key_grid,0*key_grid+key_grid_yofs_1,0],[0*key_grid,1*key_grid+key_grid_yofs_1,0],[0*key_grid,2*key_grid+key_grid_yofs_1,0],[0*key_grid,3*key_grid+key_grid_yofs_1,0],
    [1*key_grid,0*key_grid+key_grid_yofs_2,0],[1*key_grid,1*key_grid+key_grid_yofs_2,0],[1*key_grid,2*key_grid+key_grid_yofs_2,0],[1*key_grid,3*key_grid+key_grid_yofs_2,0],
    [2*key_grid,0*key_grid+key_grid_yofs_3,0],[2*key_grid,1*key_grid+key_grid_yofs_3,0],[2*key_grid,2*key_grid+key_grid_yofs_3,0],[2*key_grid,3*key_grid+key_grid_yofs_3,0],
    [3*key_grid,0*key_grid+key_grid_yofs_4,0],[3*key_grid,1*key_grid+key_grid_yofs_4,0],[3*key_grid,2*key_grid+key_grid_yofs_4,0],[3*key_grid,3*key_grid+key_grid_yofs_4,0],
    [4*key_grid,0*key_grid+key_grid_yofs_5,0],[4*key_grid,1*key_grid+key_grid_yofs_5,0],[4*key_grid,2*key_grid+key_grid_yofs_5,0],[4*key_grid,3*key_grid+key_grid_yofs_5,0],
    [5*key_grid,0*key_grid+key_grid_yofs_6,0],[5*key_grid,1*key_grid+key_grid_yofs_6,0],[5*key_grid,2*key_grid+key_grid_yofs_6,0],[5*key_grid,3*key_grid+key_grid_yofs_6,0],
    [3.5*key_grid,-1*key_grid+key_grid_yofs_6,0],
    [4.5*key_grid,-1*key_grid,0],
//    [5.6*key_grid,-1.454*key_grid+key_grid_yofs_6,60.64],
//    [5.65*key_grid,-1.554*key_grid+key_grid_yofs_6,60.64],
    [5.645*key_grid,-1.56*key_grid+key_grid_yofs_6,60.64],
//    [6.12*key_grid,-0.55*key_grid+key_grid_yofs_6,60.64],
//    [6.17*key_grid,-0.64*key_grid+key_grid_yofs_6,60.64],
//    [6.16*key_grid,-0.65*key_grid+key_grid_yofs_6,60.64],
    [6.135*key_grid,-0.69*key_grid+key_grid_yofs_6,60.64]
];


extra_pos_list=[
    [0*key_grid,3.5*key_grid+key_grid_yofs_1,0],
    [5*key_grid,3.5*key_grid+key_grid_yofs_1,0]
];

holes_pos_list=[
    [0.5*key_grid,0.5*key_grid],[0.5*key_grid,2.5*key_grid],
    [4.5*key_grid,0.5*key_grid+1.5*_3_32nds],[4.5*key_grid,2.5*key_grid+1.5*_3_32nds],
    [5.4*key_grid,-0.75*key_grid],
//    [5.39*key_grid,-0.7*key_grid]
];

led_pos_list=[
    [0.5*key_grid,-3],[0.5*key_grid,39.5],
    [2.5*key_grid,-3],[2.5*key_grid,39.5],
    [4.5*key_grid,39.5],
    [96,-17]
];

module pcb_perimeter_2d(leds,holes) {
    difference() {
        hull() {
            for(keypos=key_pos_list) {
                kx=keypos[0];
                ky=keypos[1];
                rot=keypos[2];

                translate([kx,ky,0]) rotate([0,0,rot]){
    //                translate([-key_grid/2,-key_grid/2,0]) square(key_grid);
                    translate([-sw_w/2,-sw_l/2,0]) circle(1);
                    translate([sw_w/2,-sw_l/2,0]) circle(1);
                    translate([-sw_w/2,sw_l/2,0]) circle(1);
                    translate([sw_w/2,sw_l/2,0]) circle(1);
                }
            }
            for(keypos=extra_pos_list) {
                kx=keypos[0];
                ky=keypos[1];
                rot=keypos[2];

                translate([kx,ky,0]) rotate([0,0,rot]){
    //                translate([-key_grid/2,-key_grid/2,0]) square(key_grid);
                    translate([-sw_w/2,-sw_l/2,0]) circle(1);
                    translate([sw_w/2,-sw_l/2,0]) circle(1);
                    translate([-sw_w/2,sw_l/2,0]) circle(1);
                    translate([sw_w/2,sw_l/2,0]) circle(1);
                }
            }
        }
        union() {
            if(leds) {
                pcb_leds_2d();
            }
        }
        union() {
            if(holes) {
                pcb_holes_2d();
            }
        }
    };
}

module hull_2d(margin) {
    minkowski() {
        pcb_perimeter_2d(false,false);
        circle(margin);
    }
//            pcb_perimeter_2d(false,false);
}

module pcb_leds_2d() {
    for(keypos=led_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        translate([kx,ky,0]) circle(4);
    };
}

module pcb_holes_2d() {
    for(keypos=holes_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        translate([kx,ky,0]) circle(2);
    };
}

module pcb_perimeter(leds,holes) {
    linear_extrude(0.5) pcb_perimeter_2d(leds,holes);
}

module pcb_perimeter_withholes() {
    linear_extrude(0.5) {
        difference() {
            pcb_perimeter_2d();
            pcb_leds_2d();
        };
    }
}

module connectors() {
    translate([62,71,-3.2])cube([9,7.5,3.2]);
    translate([102,-2.5,-5])rotate([0,0,-29.36])cube([6.2,14.5,5]);
}

module connectors_holes() {
    translate([62,71,-3.2]){translate([-3,-1,-2])cube([9+6,7.5+21,3.2+4]);};
    translate([102,-2.5,-5])rotate([0,0,-29.36]){translate([-2.5,-1,-1.5])cube([6.2+5,14.5+41,5+3]);};
}

module switch_lower(cut) {
    translate([0,0,sw_lower_baseh]) {
        x=14.0/2-0.05;
        y=14.0/2-0.05;
        notchw=sw_notchw;
        notchl=sw_notchl;
        notchh=sw_notchh+ (cut?10:0);
        notcho=sw_notchh+ (cut?0:0);
        ext=(cut?10:0);
        translate([-x,-y,-(sw_lower_baseh+ext)]) cube([x*2,y*2,sw_lower_baseh+ext],false);


        translate([-notchw/2,-notchl/2-y-notchl/2,-notchh-notcho]) cube([notchw,notchl,notchh],false);
        translate([-notchw/2,-notchl/2+y+notchl/2,-notchh-notcho]) cube([notchw,notchl,notchh],false);

        translate([0,0,-sw_lower_baseh-sw_lower_stemh]) cylinder(sw_lower_stemh,r=sw_lower_stemr,false);
        translate([sw_pin1_x,sw_pin1_y,-sw_lower_baseh-sw_pin_h]) cylinder(sw_pin_h,r=sw_pin_r,false);
        translate([sw_pin2_x,sw_pin2_y,-sw_lower_baseh-sw_pin_h]) cylinder(sw_pin_h,r=sw_pin_r,false);

        translate([-5,0,-sw_lower_baseh-sw_lower_stemh]) cylinder(h=sw_lower_stemh,r1=1,r2=1);
        translate([5,0,-sw_lower_baseh-sw_lower_stemh]) cylinder(h=sw_lower_stemh,r1=1,r2=1);
    };
}

module switch_upper(cut) {
    translate([0,0,sw_lower_baseh]) {
        ax=15.7/2;
        ay=15.9/2;
        bx=cut?ax:(11.2/2);
        by1=cut?ay:(4.5);
        by2=cut?ay:(6.5);
        h=sw_upper_baseh;
        hull() {
            polyhedron(points=[
                [-ax,-ay,0],[ax,-ay,0],[-ax,ay,0],[ax,ay,0],
                [-bx,-by1,h],[bx,-by1,h],[-bx,by2,h],[bx,by2,h]
            ],faces=[
                [0,1,3,2],
                [4,5,7,6],
                [0,1,5,4],
                [0,4,6,2],
                [2,3,7,6],
                [5,1,3,7]
            ]);
        };
        translate([0,0,h]) {
            cylinder(sw_stem_h,r=sw_stem_r,false);
        };
    };
};

module switchcover() {
    w=15.7+0.5;
    l=15.9+0.5;
    w2=w/2;
    l2=l/2;
    h1=5.9;
    h2=1.3;
    xl=0.5+0.25;
    xu=0.5+0.25;
    yl=1.1+0.25;
    yu=0.2+0.25;
    translate([-4/2,-(l+1)/2,shl_pch_h])cube([4,l+1,h1]);
    translate([-w/2,-(l)/2,shl_pch_h-10])cube([w,l,h1*10+50]);

    translate([-w/2,-l/2,shl_pch_h])cube([w,l,h1]);
    translate([0,0,shl_pch_h+h1])hull() {
        polyhedron(points=[
            [-w2,-l2,0],[w2,-l2,0],[-w2,l2,0],[w2,l2,0],
            [-w2+xl,-l2+yl,h2],[w2-xl,-l2+yl,h2],[-w2+xu,l2-yu,h2],[w2-xu,l2-yu,h2]
        ],faces=[
            [0,1,3,2],
            [4,5,7,6],
            [0,1,5,4],
            [0,4,6,2],
            [2,3,7,6],
            [5,1,3,7]
        ]);
    };
}

module switch(cut) {
    switch_lower(cut);
    switch_upper(cut);
}

module switches(cut) {
    for(keypos=key_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        rot=keypos[2];

        translate([kx,ky,0]) rotate([0,0,rot]){
//            switch(cut);
            switchcover();
        }
    }
}

module keycaps() {
    for(keypos=key_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        rot=keypos[2];

        translate([kx,ky,shl_o1+shl_pch_h+shl_th2-0.1]) rotate([0,0,rot]){
//            switch(cut);
            translate([-10,-10,0])cube([20,20,20]);
        }
    }
}

module switches2() {
    for(keypos=key_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        rot=keypos[2];

        translate([kx,ky,0]) rotate([0,0,rot]){
//            switch_lower(true);
//            switch_upper(false);
            switchcover();
        }
    }
}

module main() {
//    cylinder(10,10);

//    translate([-10,-35,0]) cube([135,105,0.2]);

    for(keypos=key_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        rot=keypos[2];

        translate([kx,ky,0]) rotate([0,0,rot]){
//            switch();
            cylinder(h=3,r1=sw_mpin_d/2,r2=sw_mpin_d/2);
            translate([-sw_spin_x,0,0]) cylinder(h=2,r1=sw_spin_d/2,r2=sw_spin_d/2);
            translate([sw_spin_x,0,0]) cylinder(h=2,r1=sw_spin_d/2,r2=sw_spin_d/2);
            /*
            cylinder(h=2,r1=sw_mpin_d/2,r2=sw_mpin_d/2);
            translate([-sw_spin_x,0,0]) cylinder(h=1,r1=sw_spin_d/2,r2=sw_spin_d/2);
            translate([sw_spin_x,0,0]) cylinder(h=1,r1=sw_spin_d/2,r2=sw_spin_d/2);
*/
//            translate([-key_grid/2,-key_grid/2,0]) cube(key_grid);
        }
    }
};


shl_m1=2.5;
shl_m2=3.5;
shl_bh1=1.8-0.5-0.5;
shl_bh2=1.9; // foam height
shl_ld_h=1.5;
shl_pch_h=1+2.0;
//shl_o1=2.2;
shl_o1=0.5;
//shl_o2=1.9;
shl_o2=1.9+0.3; // foam height
shl_th1=shl_o1+shl_o2+shl_pch_h;
//shl_th2=6.5-1.65;
shl_th2=8.2-1.65-0.5;
shl_eps=0.1;
shl_th3=6;

module screws(screwin) {
    r=screwin?(screw_d/3):(screw_d/2);
    for(keypos=holes_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        translate([kx,ky,-shl_o2-shl_ld_h-shl_bh1-shl_bh2-0.01]) cylinder(h=screw_l+0.01,r1=r,r2=r);
        translate([kx,ky,-shl_o2-shl_ld_h-shl_bh1-shl_bh2-0.01]) cylinder(h=screw_f/2,r1=screw_d/2+screw_f/2,r2=screw_d/2);
//        translate([kx,ky,-shl_o2-shl_ld_h-shl_bh1-shl_bh2-0.01]) cylinder(h=1,r1=screw_d/2+1,r2=screw_d/2+1);
    };
}

module shell_ring(r1,r2,y,h) {
    if(r1>0){
        translate([0,0,y]) difference() {
                {linear_extrude(h) hull_2d(r2);};
                {translate([0,0,-1])linear_extrude(h+2) hull_2d(r1);};
        }
    }else{
      translate([0,0,y])linear_extrude(h) hull_2d(r2);
    }
}

module pcf_patch() {
    intersection() {
        {
            for(x=[0,1,2,3]) {
                translate([x*1+0.5,2,0]) scale([1.5,4,1]) sphere(0.75);
            };
        };
        translate([0,0,-1])cube([4,4,2]);
    }
}

module pcf_plane() {
//    for(x=[-2:16]) {
//        for(y=[-6:10]) {
    for(x=[-2:2]) {
        for(y=[-4:0]) {
            translate([x*8,y*8,0])pcf_patch();
            translate([x*8+4,y*8+4,0])pcf_patch();
            translate([x*8+4+4,y*8,0])rotate([0,0,90])pcf_patch();
            translate([x*8+4,y*8+4,0])rotate([0,0,90])pcf_patch();
       }
    }
}

supports_list=[
    [0,1,0],    [1,2,0],    [2,3,0],
    [4,5,0],    [5,6,0],    [6,7,0],
    [8,9,0],    [9,10,0],    [10,11,0],
    [12,13,0],    [13,14,0],    [14,15,0],
    [16,17,0],    [17,18,0],    [18,19,0],
    [20,21,0],    [21,22,0],    [22,23,0],

    [0,4,90],    [1,5,90],    [2,6,90],[3,7,90],
    [4,8,90],    [5,9,90],    [6,10,90],[7,11,90],
    [8,12,90],    [9,13,90],    [10,14,90],[11,15,90],
    [12,16,90],    [13,17,90],    [14,18,90],[15,19,90],
    [16,20,90],    [17,21,90],    [18,22,90],[19,23,90],

    [24,25,90],
    [26,27,90],
];

module top_supports() {
    $fn=4;
    /*
    for(keypos=key_pos_list) {
        kx=keypos[0];
        ky=keypos[1];
        rot=keypos[2];
        translate([kx,ky,shl_o1+shl_pch_h+shl_th2]) rotate([0,0,rot]) {
            for( a=[0:90:360] ) {
                rotate([0,0,a])
                for (x=[-5.5:3:6.5]) {
                    translate([x,8.25,0])
                        scale([2.55,1,1]) rotate([0,0,45]) cylinder(r1=0.20,r2=1,h=shl_th3);
                }
            }
        };
    }*/
    for(sup=supports_list) {
        ki1=sup[0];
        ki2=sup[1];
        rot=sup[2];
        x=(key_pos_list[ki1][0]+key_pos_list[ki2][0])/2;
        y=(key_pos_list[ki1][1]+key_pos_list[ki2][1])/2;
        rz=key_pos_list[ki1][2]+rot;
        translate([x,y,shl_o1+shl_pch_h+shl_th2]) rotate([0,0,rz]) {
                for (x=[-4.0:4:4]) {
                    translate([x,0,0.05])
                        scale([4.0,2,1]) rotate([0,0,45]) cylinder(r1=0.15,r2=1,h=shl_th3-0.05);
                }
            
        };
        
    }
}

module shell_upper() {
    difference() {
        union() {
            difference() {
                    shell_ring(0,shl_m1+shl_m2,shl_o1+shl_pch_h,shl_th2);
                screws(true);
                switches2();
                connectors_holes();
                shell_alignment();
            };

            difference() {
                shell_ring(shl_m1,shl_m1+shl_m2,-shl_o2,shl_th1);
                connectors_holes();
                screws(true);
                switches2();
                shell_alignment();
            };
            /*
            difference() {
                shell_ring(0,shl_m1+shl_m2,shl_o1+shl_pch_h+shl_th2,shl_th3);
                keycaps();
            };
            */
        };
//        translate([0,0,shl_m1+shl_m2+shl_th1])pcf_plane();
    };
}

module shell_cover_fillet() {
    fr=4;
    translate([0,0,-30+shl_o1+shl_pch_h+shl_th2+shl_th3-fr+0.1]) {
        hull() {
            minkowski() {
                {linear_extrude(30) hull_2d(shl_m1+shl_m2-fr+0.1);};
                {sphere(r=fr);};
            }
        }
    }
}

module shell_cover() {
    intersection() {    
        difference() {
            shell_ring(0,shl_m1+shl_m2,shl_o1+shl_pch_h+shl_th2,shl_th3);
            keycaps();
        };
        shell_cover_fillet();
    }
//        top_supports();
}

module shell_lower() {
    difference() {
        shell_ring(0,shl_m1+shl_m2,-shl_o2-shl_ld_h-shl_bh1-shl_bh2,shl_bh1);
        screws(false);
        connectors_holes();
        shell_alignment();
        shell_magnets();
    };
    difference() {
        shell_ring(shl_m1,shl_m1+shl_m2,-shl_o2-shl_ld_h-shl_bh2,shl_bh2);
        connectors_holes();
    };
    shell_loweralignment(false);
//    shell_ring(shl_m1,shl_m1+shl_m2,-shl_ld_pcb_ofs-shl_ld_h_diff2-shl_ld_h2-shl_btm_h2,shl_btm_h2);
//    shell_ring(shl_m1,shl_m1+shl_m2,shl_y+shl_btm_h1,shl_btm_h2);
}

module shell_lightdist() {
    difference() {
        shell_ring(0,shl_m1+shl_m2,    -shl_o2-shl_ld_h,shl_ld_h);
        screws(false);
        connectors_holes();
        shell_alignment();
    };
}

module shell_loweralignment(cut) {
//    r=cut?5.1:4.95;
    r=cut?5.1:4.75;
    h=(cut?1.1:0.8)+shl_bh2+shl_bh1-0.1;
    translate([30,30,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+0.1])cylinder(h=h,r1=r,r2=r-0.1);
    translate([70,30,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+0.1])cylinder(h=h,r1=r,r2=r-0.1);
}

module shell_lightdist2() {
    z=-shl_o2-shl_ld_h;
//    shell_ring(0.01,shl_m1-0.1,z+shl_ld_h-0.1,1);
//    shell_ring(0,shl_m1+shl_m2,z,shl_ld_h);


    difference() {
//        shell_ring(shl_m1+shl_m2,shl_m1+shl_m2,    -shl_o2-shl_ld_h,shl_ld_h);
        union(){
             shell_ring(1.50,shl_m1-0.25,z+shl_ld_h-0.1,1.5);
            shell_ring(0,shl_m1+shl_m2,z,shl_ld_h);
        };
        screws(false);
        shell_loweralignment(true);
        connectors_holes();
        shell_magnets();
        shell_alignment();
    };
}

/*
led_pos_list=[
    [0.5*key_grid,-3],[0.5*key_grid,39.5],
    [2.5*key_grid,-3],[2.5*key_grid,39.5],
    [4.5*key_grid,39.5],
    [96,-17]
];
*/

led_sep_list=[
    [-100,30,0.8],[172,25,0.58],
    [270,45,0.60],[208,70,0.125],
    [0,40,0.20],[260,40,0.55]
];

module shell_lightdist2_separator() {
    for (i=[0:5]) {
        ledpos=led_pos_list[i];
        ray=led_sep_list[i];
            for(s=[0:ray[1]]){
                color([0,1,1])translate([ledpos[0],ledpos[1],0]){
                    rotate([0,0,ray[0]]) {
                        translate([s,0,0])
                    cylinder(r1=6+s*ray[2],r2=6+s*ray[2],h=10);
                }
            }
        };
    };
}

module shell_pcb() {
    shell_ring(0,0.1,0,shl_pch_h);
}

module shell_alignment() {
    /*
    h=(shl_o2+shl_ld_h+shl_bh1+shl_bh2+shl_bh1/2)+(shl_o1+1)+8;
    translate([30,-15,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+shl_bh1/2])cube([5,5,h]);
    translate([50,-15,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+shl_bh1/2])cube([5,5,h]);
    */
}

module shell_magnets() {
    ch=3;cr=5.1;
//    translate([95,40,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+0.5]){
    translate([100,60,-shl_o2-shl_ld_h-shl_bh1-shl_bh2+0.5]){
        cylinder(h=ch,r1=cr,r2=cr+0.5);
        translate([0,-40,0])cylinder(h=ch,r1=cr,r2=cr+0.5);
//        translate([0,-80,0])cylinder(h=ch,r1=cr,r2=cr);
    }
}

module feet() {
    difference() {
        translate([cos(tenting_angle)*100,-30,0]) cube([20,100,80]);
        rotate([0,-tenting_angle,0])translate([0,-50,0])cube([250,250,80]);
        rotate([0,-tenting_angle,0])translate([110,-50,-3.25]){
            translate([0,70,0])cylinder(r1=6.5,r2=6.5,h=3.25);
            translate([0,110,0])cylinder(r1=6.5,r2=6.5,h=3.25);
        };
    };
}

module template() {
    difference() {
        shell_ring(0,0.1,0,0.5);
        connectors_holes();
        translate([0,0,-0.5])linear_extrude(2.5){
            pcb_holes_2d();
            pcb_leds_2d();
        };
        translate([0,0,-(-shl_o2-shl_ld_h-shl_bh1-shl_bh2+0.5)])shell_magnets();
        translate([0,0,-(-shl_o2-shl_ld_h-shl_bh1-shl_bh2)-0.2])shell_loweralignment();
    }
}


module all() {
    expy=20*explode_factor;
    caserot=(gen_feet)?(-tenting_angle):0;
    rotate([0,caserot,0])translate([10,0,10])union(){
        if(gen_magnets) { color([0.0,0.0,0.0]) shell_magnets(); };

        if(gen_bottom) {translate([0,0,expy*0])color([0.5,0.5,0.5]) shell_lower();};
        if(gen_lightdistributor) {translate([0,0,expy*1])color([1.0,1.0,1.0,1.0]) shell_lightdist2();};
        if(gen_pcb) {translate([0,0,expy*2])color([0.1,0.7,0.2]) shell_pcb();};
        if(gen_pcb) {translate([0,0,expy*2])color([0.8,0.8,0.8]) connectors();};

        if(gen_top) {translate([0,0,expy*3])color([0.5,0.5,0.5]) shell_upper();};
        if(gen_top) {translate([0,0,expy*3])color([0.5,0.5,0.5]) shell_cover();};

        if(gen_top_3dprint_supports) {translate([0,0,expy*3])top_supports();};

        if(gen_foamtemplate){translate([0,0,expy*5])template();}
    }
    if(gen_feet) {feet();};
}

if(gen_left) {
    all(){}
};

if(gen_right) {
    translate([350,0,0])scale([-1,1,1])all(){}
};
